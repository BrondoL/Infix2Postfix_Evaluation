#include <iostream>

using namespace std;

struct stack{
    double StacK[100000];
    char Stack[100000];
    int top;
};

//========================================================================================== Postfix

class Postfix{
private:
    stack tumpuk;

public:
    void init(){
        tumpuk.top = -1;
    }

    void push(char input){
            tumpuk.top++;
            tumpuk.Stack[tumpuk.top] = input;
    }

    void pop(){
        tumpuk.top--;
    }

    char Top(){
        return tumpuk.Stack[tumpuk.top];
    }

    bool isEmpty(){
        if(tumpuk.top <= -1)
            return true;
        else
            return false;
    }
}; Postfix SP;

//========================================================================================== Evaluate

class Eval{
private:
    stack Tumpuk;

public:
    void push(double input){
            Tumpuk.top++;
            Tumpuk.StacK[Tumpuk.top] = input;
    }

    void pop(){
        Tumpuk.top--;
    }

    double Top(){
        return Tumpuk.StacK[Tumpuk.top];
    }
}; Eval SE;

//========================================================================================== Infix

string trim(string str);
string toInfix(string Q);

//========================================================================================== Postfix

bool isOperand(char input);
bool isOperator(char input);
int getlevel(char input);
bool precedence(char input1, char input2);
string InfixtoPostfix(string input);

//========================================================================================== Evaluate

double Operation(int op1, char c, int op2);
bool Operand(char input);
double Evaluate(string input);
double pow(double number, double exp);

//========================================================================================== Main

int main(){
    string Q;

    cout<<"\t   https://github.com/BrondoL/Infix2Postfix_Evaluation"<<endl;
    cout<<"\t||=====================================================||"<<endl;
    cout<<"\t||                                                     ||"<<endl;
    cout<<"\t||      DEVELOPED BY BrondoL aka Aulia Ahmad Nabil     ||"<<endl;
    cout<<"\t||                                                     ||"<<endl;
    cout<<"\t||=====================================================||"<<endl<<endl;
    cout<<"\t\t\t     Infix To Postfix"<<endl<<endl;
    cout << "Enter Infix Expression \n";
    cout << (char)62 << (char)62 << " ";
    getline(cin,Q);
    string I = toInfix(trim(Q));
    cout << "\nInfix    = " << I;
    string P = InfixtoPostfix(I);
    cout << "\nPostfix  = " << P;
    double E = Evaluate(P);
    cout << "\nEvaluate = " << E;

    cin.get();
    return 0;
}

//========================================================================================== Infix

string trim(string c){
    int n=0, i=0;
    while(c[i] != '\0'){
        if (c[i] != ' ')
            c[n++]=c[i];
        i++;
    }
    c[n]='\0';
    return c;
}

string toInfix(string c){
    string I = "";
    int i=0;
    while(c[i] != '\0'){
        if (i==0 && c[i]=='-' && isOperand(c[i+1])) //jika di awal ekspresi adalah angka negatif
            I = I + c[i];
        else if (c[i]=='-' && (i==0 || isOperator(c[i-1])) && (isOperand(c[i+1]) || c[i+1]=='('))  //jika tanda - terdapat di {awal atau setelah operator} dan {sebelum angka atau sebelum tanda ( }
            I = I + "-1 * ";
        else if (isOperand(c[i]) && c[i+1]=='(')  //jika didepan angka ada ( tanpa operator
            I = I + c[i] + " * ";
        else if (isOperand(c[i]) && isOperand(c[i+1]))  //jika setelah angka adalah angka
            I = I + c[i];
        else if(c[i+1] == '\0') // jika sudah mencapai karakter terakhir
            I = I + c[i];
        else
            I = I + c[i] + " ";
        i++;
    }
    return I;
}

//========================================================================================== Postfix

bool isOperand(char input){
    int c = (int)input;
    if((c >= 48 && c <= 57) || (c >= 65 && c <= 90) || (c >= 97 && c <= 122))
        return true;
    else
        return false;
}

bool isOperator(char input){
    int c = (int)input;
    if(c == 94 || (c >= 42 && c <= 43) || c == 45 || c == 47 || c == 37)
        return true;
    else
        return false;
}

int getlevel(char input){
    if(input == '^')
        return 3;
    else if(input == '*' || input == '/' || input == '%')
        return 2;
    else if(input == '+' || input == '-')
        return 1;
    else if(input == '(' || input == ')')
        return 0;
    else
        return -1;
}

bool precedence(char input1, char input2){
    int c1 = getlevel(input1);
    int c2 = getlevel(input2);

    if(c1 <= c2)
        return true;
    else
        return false;
}

string InfixtoPostfix(string input){
    SP.init();
    int i=0;
    string P = "";
    while(input[i] != '\0'){
        if(isOperand(input[i])) {
            P += input[i];
        }
        if(input[i] == '('){
            SP.push(input[i]);
        }
        if(input[i] == ')'){
            while(!SP.isEmpty() && SP.Top() != '('){
                P = P + " " + SP.Top(); SP.pop();
            }
            SP.pop();
        }
        if(isOperator(input[i])){
            if(input[i] == '-' && isOperand(input[i+1]))
                P = P + input[i];
            else if(SP.isEmpty() || SP.Top() == '('){
                SP.push(input[i]);
            }else{
                while(!SP.isEmpty() && SP.Top() != '(' && precedence(input[i], SP.Top())){
                    P = P + " " + SP.Top(); SP.pop();
                }
                SP.push(input[i]);
            }
        }
        if(isOperator(input[i]) && !isOperand(input[i+1]))
            P += " ";
        i++;
    }
    while(!SP.isEmpty()){
        P = P + " " + SP.Top(); SP.pop();
    }
    return P;
}

//========================================================================================== Evaluate

double pow(double number, double exp){
    for(int i=1; i<exp; i++)
        number *= number;
    return number;
}

bool Operand(char input){
    int c = (int)input;
    if(c >= 48 && c <= 57)
        return true;
    else if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)){
        cout << "\nNot Evaluated" << endl;
        cin.get();
        exit(0);
    }
    else
        return false;
}

double Operation(double op1, char c, double op2){
    if(c == '^')
        return (pow(op1,op2));
    else if(c == '*')
        return (op1 * op2);
    else if(c == '/')
        return (op1 / op2);
    else if(c == '%'){
        return ((int)op1 % (int)op2);
    }
    else if(c == '+')
        return (op1 + op2);
    else if(c == '-')
        return (op1 - op2);
    else return 0;
}

double Evaluate(string input){
    int i = 0;
    while(input[i] != '\0'){
        if(Operand(input[i])){
            double operand = 0;
            while(input[i] != '\0' && Operand(input[i])){
                operand = (operand * 10) + (input[i] - 48);
                if(input[i-1] == '-')
                    operand = -1 * operand;
                i++;
            }
            SE.push(operand);
        }

        if(isOperator(input[i]) && !isOperand(input[i+1])){
            double A = SE.Top(); SE.pop();
            double B = SE.Top(); SE.pop();
            double result = Operation(B,input[i],A);
            SE.push(result);
        }
        i++;
    }
    return SE.Top();
}
