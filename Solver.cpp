#include <iostream>
#include <algorithm>

using namespace std;

struct stack{
    double StacK[100000];
    char Stack[100000];
    int top;
};

//========================================================================================== Infix dan Postfix

class IPfix{
private:
    stack tumpuk;

public:
    void init(){
        tumpuk.top = -1;
    }

    void push(char input){
            tumpuk.top++;
            tumpuk.Stack[tumpuk.top] = input;
    }

    void pop(){
        tumpuk.top--;
    }

    char Top(){
        return tumpuk.Stack[tumpuk.top];
    }

    bool isEmpty(){
        if(tumpuk.top <= -1)
            return true;
        else
            return false;
    }
}; IPfix SIP;

//========================================================================================== Evaluate

class Eval{
private:
    stack Tumpuk;

public:
    void push(double input){
            Tumpuk.top++;
            Tumpuk.StacK[Tumpuk.top] = input;
    }

    void pop(){
        Tumpuk.top--;
    }

    double Top(){
        return Tumpuk.StacK[Tumpuk.top];
    }
}; Eval SE;

//========================================================================================== Infix

bool isKurung(char input);
string removeSpaces(string str);
string toInfix(string Q);

//========================================================================================== Postfix

bool isOperand(char input);
bool isOperator(char input);
int getlevel(char input);
bool precedence(char input1, char input2);
string InfixtoPostfix(string input);

//========================================================================================== Evaluate

double Operation(int op1, char c, int op2);
bool Operand(char input);
double Evaluate(string input);
double pow(double number, double exp);

//========================================================================================== Main

int main(){
    string Q;

    cout<<"\t   https://github.com/BrondoL/Infix2Postfix_Evaluation"<<endl;
    cout<<"\t||=====================================================||"<<endl;
    cout<<"\t||                                                     ||"<<endl;
    cout<<"\t||      DEVELOPED BY BrondoL aka Aulia Ahmad Nabil     ||"<<endl;
    cout<<"\t||                                                     ||"<<endl;
    cout<<"\t||=====================================================||"<<endl<<endl;
    cout<<"\t\t\t     Infix To Postfix"<<endl<<endl;
    cout << "Enter Infix Expression \n";
    cout << (char)62 << (char)62 << " ";
    getline(cin,Q);
    string I = toInfix(removeSpaces(Q));
    cout << "\nInfix    = " << I;
    string P = InfixtoPostfix(I);
    cout << "\nPostfix  = " << P;
    double E = Evaluate(P);
    cout << "\nEvaluate = " << E;

    cin.get();
    return 0;
}

//========================================================================================== Infix

bool isKurung(char input){
    int c = (int)input;
    if(c == 40 || c == 41)
        return true;
    else
        return false;
}

string removeSpaces(string str)
{
    str.erase(remove(str.begin(), str.end(), ' '), str.end());
    return str;
}

string toInfix(string Q){
    SIP.init();
    string I = "";
    int i = 0;
    while(Q[i] != '\0'){
        if(Q[i+1] == '\0')
            if(Q[i] == ')')
                I = I + " " + Q[i];
        if(isOperand(Q[i])){
            if(SIP.isEmpty()){
                if(Q[i+1]=='(')
                    I = I + Q[i] + " *";
                else
                    I = I + Q[i];
            }else{
                if(Q[i-2] == '\0')
                    I = I + SIP.Top() + " " + Q[i];
                else if(Q[i+1]=='(')
                    I = I + " " + SIP.Top() + " " + Q[i] + " *";
                else
                    I = I + " " + SIP.Top() + " " + Q[i];
                SIP.pop();
                }
        }
        if(isOperator(Q[i]) || isKurung(Q[i])){
            if(SIP.isEmpty()){
                if(Q[i] == '-' && Q[i+1] == '(' && (!isOperand(Q[i-1]) || Q[i-1] == '\0'))
                    I = I + Q[i] + "1 *";
                else if(Q[i] == '-' && isOperand(Q[i+1]) && (!isOperand(Q[i-1]) || Q[i-1] == '\0'))
                    I = I + Q[i] + "1 * ";
                else
                    SIP.push(Q[i]);
            }else{
                if(Q[i] == '-'){
                    if(Q[i+1] == '('){
                        I = I + " " + SIP.Top() + " " + Q[i] + "1 *";
                        SIP.pop();
                    }else if(isOperand(Q[i+1])){
                        I = I + " " + SIP.Top() + " " + Q[i] + "1 * ";
                        SIP.pop();
                    }
                }else{
                    I = I + " " + SIP.Top() + " " + Q[i] + " ";
                    SIP.pop();
                }
            }
        }
        i++;
    }
    return I;
}

//========================================================================================== Postfix

bool isOperand(char input){
    int c = (int)input;
    if((c >= 48 && c <= 57) || (c >= 65 && c <= 90) || (c >= 97 && c <= 122))
        return true;
    else
        return false;
}

bool isOperator(char input){
    int c = (int)input;
    if(c == 94 || (c >= 42 && c <= 43) || c == 45 || c == 47 || c == 37)
        return true;
    else
        return false;
}

int getlevel(char input){
    if(input == '^')
        return 3;
    else if(input == '*' || input == '/' || input == '%')
        return 2;
    else if(input == '+' || input == '-')
        return 1;
    else if(input == '(' || input == ')')
        return 0;
    else
        return -1;
}

bool precedence(char input1, char input2){
    int c1 = getlevel(input1);
    int c2 = getlevel(input2);

    if(c1 <= c2)
        return true;
    else
        return false;
}

string InfixtoPostfix(string input){
    SIP.init();
    int i=0;
    string P = "";
    while(input[i] != '\0'){
        if(isOperand(input[i]) || (input[i] == '-' && isOperator(input[i-2]))){
            P += input[i];
        }
        if(input[i] == '('){
            SIP.push(input[i]);
        }
        if(input[i] == ')'){
            while(!SIP.isEmpty() && SIP.Top() != '('){
                P = P + " " + SIP.Top(); SIP.pop();
            }
            SIP.pop();
        }
        if(isOperator(input[i]) && !isOperator(input[i-2])){
            if(SIP.isEmpty() || SIP.Top() == '('){
                SIP.push(input[i]);
            }else{
                while(!SIP.isEmpty() && SIP.Top() != '(' && precedence(input[i], SIP.Top())){
                    P = P + " " + SIP.Top(); SIP.pop();
                }
                SIP.push(input[i]);
            }
        }
        if((isOperator(input[i]) && !isOperator(input[i-2]) && input[i-1] != '\0'))
            P += " ";
        i++;
    }
    while(!SIP.isEmpty()){
        P = P + " " + SIP.Top(); SIP.pop();
    }
    return P;
}

//========================================================================================== Evaluate

double pow(double number, double exp){
    for(int i=1; i<exp; i++)
        number *= number;
    return number;
}

bool Operand(char input){
    int c = (int)input;
    if(c >= 48 && c <= 57)
        return true;
    else if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)){
        cout << "\nNot Evaluated" << endl;
        cin.get();
        exit(0);
    }
    else
        return false;
}

double Operation(double op1, char c, double op2){
    if(c == '^')
        return (pow(op1,op2));
    else if(c == '*')
        return (op1 * op2);
    else if(c == '/')
        return (op1 / op2);
    else if(c == '%'){
        return ((int)op1 % (int)op2);
    }
    else if(c == '+')
        return (op1 + op2);
    else if(c == '-')
        return (op1 - op2);
    else return 0;
}

double Evaluate(string input){
    int i = 0;
    while(input[i] != '\0'){
        if(Operand(input[i])){
            double operand = 0;
            while(input[i] != '\0' && Operand(input[i])){
                operand = (operand * 10) + (input[i] - 48);
                if(input[i-1] == '-')
                    operand = -1 * operand;
                i++;
            }
            SE.push(operand);
        }

        if(isOperator(input[i]) && !isOperand(input[i+1])){
            double A = SE.Top(); SE.pop();
            double B = SE.Top(); SE.pop();
            double result = Operation(B,input[i],A);
            SE.push(result);
        }
        i++;
    }
    return SE.Top();
}

